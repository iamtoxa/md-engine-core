// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Vec3f } from '../mde/vec3f.js';


export class ClientInput {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ClientInput {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsClientInput(bb:flatbuffers.ByteBuffer, obj?:ClientInput):ClientInput {
  return (obj || new ClientInput()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsClientInput(bb:flatbuffers.ByteBuffer, obj?:ClientInput):ClientInput {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ClientInput()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

seq():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

clientTick():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

move(obj?:Vec3f):Vec3f|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Vec3f()).__init(this.bb_pos + offset, this.bb!) : null;
}

viewDir(obj?:Vec3f):Vec3f|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Vec3f()).__init(this.bb_pos + offset, this.bb!) : null;
}

buttons():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

analog1():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

analog2():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startClientInput(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addSeq(builder:flatbuffers.Builder, seq:number) {
  builder.addFieldInt32(0, seq, 0);
}

static addClientTick(builder:flatbuffers.Builder, clientTick:number) {
  builder.addFieldInt32(1, clientTick, 0);
}

static addMove(builder:flatbuffers.Builder, moveOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, moveOffset, 0);
}

static addViewDir(builder:flatbuffers.Builder, viewDirOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, viewDirOffset, 0);
}

static addButtons(builder:flatbuffers.Builder, buttons:number) {
  builder.addFieldInt32(4, buttons, 0);
}

static addAnalog1(builder:flatbuffers.Builder, analog1:number) {
  builder.addFieldFloat32(5, analog1, 0.0);
}

static addAnalog2(builder:flatbuffers.Builder, analog2:number) {
  builder.addFieldFloat32(6, analog2, 0.0);
}

static endClientInput(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
