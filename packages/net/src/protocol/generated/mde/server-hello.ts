// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class ServerHello {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ServerHello {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsServerHello(bb:flatbuffers.ByteBuffer, obj?:ServerHello):ServerHello {
  return (obj || new ServerHello()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsServerHello(bb:flatbuffers.ByteBuffer, obj?:ServerHello):ServerHello {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ServerHello()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

serverVersion():string|null
serverVersion(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
serverVersion(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

protocolMajor():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

protocolMinor():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

worldId():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

tickRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

timeMs():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

static startServerHello(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addServerVersion(builder:flatbuffers.Builder, serverVersionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, serverVersionOffset, 0);
}

static addProtocolMajor(builder:flatbuffers.Builder, protocolMajor:number) {
  builder.addFieldInt16(1, protocolMajor, 0);
}

static addProtocolMinor(builder:flatbuffers.Builder, protocolMinor:number) {
  builder.addFieldInt16(2, protocolMinor, 0);
}

static addWorldId(builder:flatbuffers.Builder, worldId:number) {
  builder.addFieldInt32(3, worldId, 0);
}

static addTickRate(builder:flatbuffers.Builder, tickRate:number) {
  builder.addFieldInt16(4, tickRate, 0);
}

static addTimeMs(builder:flatbuffers.Builder, timeMs:bigint) {
  builder.addFieldInt64(5, timeMs, BigInt('0'));
}

static endServerHello(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createServerHello(builder:flatbuffers.Builder, serverVersionOffset:flatbuffers.Offset, protocolMajor:number, protocolMinor:number, worldId:number, tickRate:number, timeMs:bigint):flatbuffers.Offset {
  ServerHello.startServerHello(builder);
  ServerHello.addServerVersion(builder, serverVersionOffset);
  ServerHello.addProtocolMajor(builder, protocolMajor);
  ServerHello.addProtocolMinor(builder, protocolMinor);
  ServerHello.addWorldId(builder, worldId);
  ServerHello.addTickRate(builder, tickRate);
  ServerHello.addTimeMs(builder, timeMs);
  return ServerHello.endServerHello(builder);
}
}
