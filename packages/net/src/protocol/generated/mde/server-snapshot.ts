// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { EntityId } from '../mde/entity-id.js';
import { EntitySnapshot } from '../mde/entity-snapshot.js';


export class ServerSnapshot {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ServerSnapshot {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsServerSnapshot(bb:flatbuffers.ByteBuffer, obj?:ServerSnapshot):ServerSnapshot {
  return (obj || new ServerSnapshot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsServerSnapshot(bb:flatbuffers.ByteBuffer, obj?:ServerSnapshot):ServerSnapshot {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ServerSnapshot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

full():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

serverTick():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

lastInputSeqAcked():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

entities(index: number, obj?:EntitySnapshot):EntitySnapshot|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new EntitySnapshot()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

entitiesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

removed(index: number, obj?:EntityId):EntityId|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new EntityId()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 8, this.bb!) : null;
}

removedLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startServerSnapshot(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addFull(builder:flatbuffers.Builder, full:boolean) {
  builder.addFieldInt8(0, +full, +false);
}

static addServerTick(builder:flatbuffers.Builder, serverTick:number) {
  builder.addFieldInt32(1, serverTick, 0);
}

static addLastInputSeqAcked(builder:flatbuffers.Builder, lastInputSeqAcked:number) {
  builder.addFieldInt32(2, lastInputSeqAcked, 0);
}

static addEntities(builder:flatbuffers.Builder, entitiesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, entitiesOffset, 0);
}

static createEntitiesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEntitiesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRemoved(builder:flatbuffers.Builder, removedOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, removedOffset, 0);
}

static startRemovedVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 4);
}

static endServerSnapshot(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createServerSnapshot(builder:flatbuffers.Builder, full:boolean, serverTick:number, lastInputSeqAcked:number, entitiesOffset:flatbuffers.Offset, removedOffset:flatbuffers.Offset):flatbuffers.Offset {
  ServerSnapshot.startServerSnapshot(builder);
  ServerSnapshot.addFull(builder, full);
  ServerSnapshot.addServerTick(builder, serverTick);
  ServerSnapshot.addLastInputSeqAcked(builder, lastInputSeqAcked);
  ServerSnapshot.addEntities(builder, entitiesOffset);
  ServerSnapshot.addRemoved(builder, removedOffset);
  return ServerSnapshot.endServerSnapshot(builder);
}
}
