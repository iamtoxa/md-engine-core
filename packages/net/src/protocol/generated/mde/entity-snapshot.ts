// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { EntityId } from '../mde/entity-id.js';
import { Quatf } from '../mde/quatf.js';
import { Vec3f } from '../mde/vec3f.js';


export class EntitySnapshot {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EntitySnapshot {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEntitySnapshot(bb:flatbuffers.ByteBuffer, obj?:EntitySnapshot):EntitySnapshot {
  return (obj || new EntitySnapshot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEntitySnapshot(bb:flatbuffers.ByteBuffer, obj?:EntitySnapshot):EntitySnapshot {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EntitySnapshot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id(obj?:EntityId):EntityId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new EntityId()).__init(this.bb_pos + offset, this.bb!) : null;
}

mask():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

pos(obj?:Vec3f):Vec3f|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Vec3f()).__init(this.bb_pos + offset, this.bb!) : null;
}

rot(obj?:Quatf):Quatf|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Quatf()).__init(this.bb_pos + offset, this.bb!) : null;
}

vel(obj?:Vec3f):Vec3f|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Vec3f()).__init(this.bb_pos + offset, this.bb!) : null;
}

hp():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

owner():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startEntitySnapshot(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, idOffset, 0);
}

static addMask(builder:flatbuffers.Builder, mask:number) {
  builder.addFieldInt32(1, mask, 0);
}

static addPos(builder:flatbuffers.Builder, posOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, posOffset, 0);
}

static addRot(builder:flatbuffers.Builder, rotOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, rotOffset, 0);
}

static addVel(builder:flatbuffers.Builder, velOffset:flatbuffers.Offset) {
  builder.addFieldStruct(4, velOffset, 0);
}

static addHp(builder:flatbuffers.Builder, hp:number) {
  builder.addFieldInt32(5, hp, 0);
}

static addOwner(builder:flatbuffers.Builder, owner:number) {
  builder.addFieldInt32(6, owner, 0);
}

static endEntitySnapshot(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
