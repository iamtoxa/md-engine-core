// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { ClientHello } from '../mde/client-hello.js';
import { ClientInput } from '../mde/client-input.js';
import { Command } from '../mde/command.js';
import { Error } from '../mde/error.js';
import { Ping } from '../mde/ping.js';
import { Pong } from '../mde/pong.js';
import { ServerHello } from '../mde/server-hello.js';
import { ServerInfo } from '../mde/server-info.js';
import { ServerSnapshot } from '../mde/server-snapshot.js';


export enum Body {
  NONE = 0,
  Ping = 1,
  Pong = 2,
  ClientHello = 3,
  ServerHello = 4,
  ClientInput = 5,
  ServerInfo = 6,
  ServerSnapshot = 7,
  Command = 8,
  Error = 9
}

export function unionToBody(
  type: Body,
  accessor: (obj:ClientHello|ClientInput|Command|Error|Ping|Pong|ServerHello|ServerInfo|ServerSnapshot) => ClientHello|ClientInput|Command|Error|Ping|Pong|ServerHello|ServerInfo|ServerSnapshot|null
): ClientHello|ClientInput|Command|Error|Ping|Pong|ServerHello|ServerInfo|ServerSnapshot|null {
  switch(Body[type]) {
    case 'NONE': return null; 
    case 'Ping': return accessor(new Ping())! as Ping;
    case 'Pong': return accessor(new Pong())! as Pong;
    case 'ClientHello': return accessor(new ClientHello())! as ClientHello;
    case 'ServerHello': return accessor(new ServerHello())! as ServerHello;
    case 'ClientInput': return accessor(new ClientInput())! as ClientInput;
    case 'ServerInfo': return accessor(new ServerInfo())! as ServerInfo;
    case 'ServerSnapshot': return accessor(new ServerSnapshot())! as ServerSnapshot;
    case 'Command': return accessor(new Command())! as Command;
    case 'Error': return accessor(new Error())! as Error;
    default: return null;
  }
}

export function unionListToBody(
  type: Body, 
  accessor: (index: number, obj:ClientHello|ClientInput|Command|Error|Ping|Pong|ServerHello|ServerInfo|ServerSnapshot) => ClientHello|ClientInput|Command|Error|Ping|Pong|ServerHello|ServerInfo|ServerSnapshot|null, 
  index: number
): ClientHello|ClientInput|Command|Error|Ping|Pong|ServerHello|ServerInfo|ServerSnapshot|null {
  switch(Body[type]) {
    case 'NONE': return null; 
    case 'Ping': return accessor(index, new Ping())! as Ping;
    case 'Pong': return accessor(index, new Pong())! as Pong;
    case 'ClientHello': return accessor(index, new ClientHello())! as ClientHello;
    case 'ServerHello': return accessor(index, new ServerHello())! as ServerHello;
    case 'ClientInput': return accessor(index, new ClientInput())! as ClientInput;
    case 'ServerInfo': return accessor(index, new ServerInfo())! as ServerInfo;
    case 'ServerSnapshot': return accessor(index, new ServerSnapshot())! as ServerSnapshot;
    case 'Command': return accessor(index, new Command())! as Command;
    case 'Error': return accessor(index, new Error())! as Error;
    default: return null;
  }
}
