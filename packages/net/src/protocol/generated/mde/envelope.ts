// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Body, unionToBody, unionListToBody } from '../mde/body.js';


export class Envelope {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Envelope {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEnvelope(bb:flatbuffers.ByteBuffer, obj?:Envelope):Envelope {
  return (obj || new Envelope()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEnvelope(bb:flatbuffers.ByteBuffer, obj?:Envelope):Envelope {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Envelope()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('MDE0');
}

seq():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

sentAtMs():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

bodyType():Body {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Body.NONE;
}

body<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startEnvelope(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addSeq(builder:flatbuffers.Builder, seq:number) {
  builder.addFieldInt32(0, seq, 0);
}

static addSentAtMs(builder:flatbuffers.Builder, sentAtMs:bigint) {
  builder.addFieldInt64(1, sentAtMs, BigInt('0'));
}

static addBodyType(builder:flatbuffers.Builder, bodyType:Body) {
  builder.addFieldInt8(2, bodyType, Body.NONE);
}

static addBody(builder:flatbuffers.Builder, bodyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, bodyOffset, 0);
}

static endEnvelope(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishEnvelopeBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MDE0');
}

static finishSizePrefixedEnvelopeBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MDE0', true);
}

static createEnvelope(builder:flatbuffers.Builder, seq:number, sentAtMs:bigint, bodyType:Body, bodyOffset:flatbuffers.Offset):flatbuffers.Offset {
  Envelope.startEnvelope(builder);
  Envelope.addSeq(builder, seq);
  Envelope.addSentAtMs(builder, sentAtMs);
  Envelope.addBodyType(builder, bodyType);
  Envelope.addBody(builder, bodyOffset);
  return Envelope.endEnvelope(builder);
}
}
